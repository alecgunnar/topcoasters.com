<?php

define('ROOT_PATH', __DIR__);

/**
 * Configuration for compiling LESS into CSS
 */
define('PATH_TO_LESS_FILE', ROOT_PATH . '/Assets/Less/main.less');
define('COMPILE_LESS_TO',   ROOT_PATH . '/Public/assets/css/main.css');

/**
 * Configuration for compiling JS files
 */
define('PATH_TO_JS_FILES',  ROOT_PATH . '/Assets/JavaScript');
define('COMPILE_JS_TO',     ROOT_PATH . '/Public/assets/javascript/main.js');

/**
 * The location of the build ID file
 */
define('BUILD_ID_FILE', ROOT_PATH . '/BUILD_ID');

pake_desc('The general Pake task, does everything.');
pake_task('default');

function run_default() {
    run_build_id();
    run_compile_less();
    run_compile_js();
}

pake_desc('Generates the Build ID.');
pake_task('build-id');

function run_build_id() {
    pake_echo('# Generate Build ID #');

    if(file_exists(BUILD_ID_FILE)) {
        $uniqueId = uniqid();

        file_put_contents(BUILD_ID_FILE, $uniqueId);

        pake_echo('>>> Generated the Build ID');
    } else {
        pake_echo('>>> Unable to generate Build ID');
    }
}

pake_desc('Compiles all of the LESS files into CSS.');
pake_task('compile-less');

function run_compile_less() {
    pake_echo('# Compile CSS to LESS #');

    if(!file_exists(COMPILE_LESS_TO)) {
        touch(COMPILE_LESS_TO);
    }

    $less = array();

    exec('lessc ' . PATH_TO_LESS_FILE . ' -x', $less);

    file_put_contents(COMPILE_LESS_TO, implode('', $less));

    pake_echo('>>> Compiled LESS');
}

pake_desc('Compiles all of the JavaScript files into one large file and minify it.');
pake_task('compile-js');

function run_compile_js() {
    pake_echo('# Compile and Minify JavaScript #');

    $allJs        = '';
    $allCleanedJs = '';
    $jsDir        = opendir(PATH_TO_JS_FILES);
    
    $compileFiles = array('onload.js');
    
    $addToJs = function($file) use(&$allJs) {
        if(file_exists(PATH_TO_JS_FILES . '/' . $file)) {
            pake_echo(">>> Compiled: " . $file);
            $allJs .= file_get_contents(PATH_TO_JS_FILES . '/' . $file);
        }
    };

    if($jsDir) {
        foreach($compileFiles as $file) {
            $addToJs($file);
        }

        while(($file = readdir($jsDir)) !== false) {
            if($file[0] != '.' && !array_key_exists($file, array_flip($compileFiles))) {
                $addToJs($file);
            }
        }

        $expLines = explode("\n", $allJs);

        foreach($expLines as $n => $v) {
            $allCleanedJs .= trim($v);
        }
    }

    file_put_contents(COMPILE_JS_TO, $allJs);
    
    if(shell_exec('uglifyjs -h')) {
        $cmd      = 'uglifyjs ' . COMPILE_JS_TO;
        $minified = shell_exec($cmd);
        file_put_contents(COMPILE_JS_TO, $minified);
        
        pake_echo('>>> Ran: ' . $cmd);
    } else {
        pake_echo('>>> Unable to minify javascript. (UglifyJS is required)');
    }
}

pake_desc('Turns the website offline');
pake_task('go-offline');

function run_go_offline() {
    $file = ROOT_PATH . '/OFFLINE';

    if(file_exists($file)) {
        if(unlink($file)) {
            pake_echo('The website is online');
        } else {
            pake_echo('FAILED to bring the website back online');
        }
    } else {
        if(touch($file)) {
            pake_echo('The website is offline');
        } else {
            pake_echo('FAILED to take the website offline');
        }
    }
}